-----------------------------------------
GCD:

 static int gcd(int a, int b)
    {
    if (b == 0)
    return a;
    return gcd(b, a % b);
    }
----------------------------------------    

POWER:(Binary exponentiation)

 static long power(int base, int power) {
        long res = 1;
        while (power != 0) {
            if ((power & 1) == 0) { //even
                base *= base;
                power = power >> 1;  //divide by 2
            } else {
                res *= base;
                power--;
            }
        }
        return res;
    }
--------------------------------------------
POWER:(modulo exponentiation)

static long power(int base, int power, int mod) {
        long res = 1;
        while (power != 0) {
            if ((power & 1) == 0) {
                base = (base*base)%mod;
                power = power >> 1;
            } else {
                res = (res*base)%mod;
                power--;
            }
        }
        return res;
    }

------------------------------------------
Check if N is power of 2

    static boolean isPowerOfTwo (int x)
        {
            return x!=0 && ((x&(x-1)) == 0);
        }

NOTE: it will return n=1 as true beacause 2^0 =1;     
        
------------------------------------------------

SIEVE using bitset: less memory:

static BitSet prime = new BitSet(((int) 1e6 + 2));
    static void bitSieve() {
        int maxN = (int) 1e6;
        prime.set(0);
        prime.set(1);
        for (int i = 2; i * i <= maxN; i++) {
            if (!prime.get(i)) {
                for (int j = i * i; j <= maxN; j += i) {
                    prime.set(j);
                }
            }
        }  
    }    

------------------------------------------------
Binary Search:

static int bs(int []arr, int l, int r, int x) {

    while(l<=r) {
        int mid = l+(r-l)/2; //to handle overflow (not use l+r/2)
        if(arr[mid]==x) {
            return mid;
        }
        if(arr[mid] < x)
            l = mid+1;
        else 
            r = mid-1;    
    }
    return -1;
}