{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"vector of int": {
		"scope": "cpp",
		"prefix": "vi",
		"body": [
			"vector<int> $1"
		],
		"description": "vector of int"
	},
	"vector of long": {
		"scope": "cpp",
		"prefix": "vll",
		"body": [
			"vector<ll> $1"
		],
		"description": "vector of long"
	},
	"Pair of int": {
		"scope": "cpp",
		"prefix": "pii",
		"body": [
			"pair<int, int> $1"
		],
		"description": "Pair of int"
	},
	"Pair of long": {
		"scope": "cpp",
		"prefix": "pll",
		"body": [
			"pair<ll, ll> $1"
		],
		"description": "Pair of long"
	},
	"map of int": {
		"scope": "cpp",
		"prefix": "mapii",
		"body": [
			"map<int, int> $1"
		],
		"description": "map of int"
	},
	"map of ll": {
		"scope": "cpp",
		"prefix": "mapll",
		"body": [
			"map<ll, ll> $1"
		],
		"description": "map of ll"
	},
	"set of int": {
		"scope": "cpp",
		"prefix": "seti",
		"body": [
			"set<int> $1"
		],
		"description": "set of int"
	},
	"set of ll": {
		"scope": "cpp",
		"prefix": "setll",
		"body": [
			"set<ll> $1"
		],
		"description": "set of ll"
	},
	"debug template": {
		"prefix": "debugcp",
		"body": [
			"void __print(int x) {cerr << x;}",
			"void __print(long x) {cerr << x;}",
			"void __print(long long x) {cerr << x;}",
			"void __print(unsigned x) {cerr << x;}",
			"void __print(unsigned long x) {cerr << x;}",
			"void __print(unsigned long long x) {cerr << x;}",
			"void __print(float x) {cerr << x;}",
			"void __print(double x) {cerr << x;}",
			"void __print(long double x) {cerr << x;}",
			"void __print(char x) {cerr << '\\'' << x << '\\'';}",
			"void __print(const char *x) {cerr << '\\\"' << x << '\\\"';}",
			"void __print(const string &x) {cerr << '\\\"' << x << '\\\"';}",
			"void __print(bool x) {cerr << (x ? \"true\" : \"false\");}",
			"",
			"template<typename T, typename V>",
			"void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}",
			"template<typename T>",
			"void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}",
			"void _print() {cerr << \"]\\n\";}",
			"template <typename T, typename... V>",
			"void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}",
			"#ifndef ONLINE_JUDGE",
			"#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)",
			"#else",
			"#define debug(x...)",
			"#endif"
		],
		"description": "debugcp"
	},
	"cp start template": {
		"prefix": "cptemp",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			"",
			"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> oset;",
			"#define ll long long",
			"#define boost ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)",
			"#define all(x) (x).begin(), (x).end()",
			"#define rall(x) (x).rbegin(), (x).rend()",
			"#define sz(x) (int)((x).size())",
			"#define endl \"\\n\"",
			"",
			"////@Deepak404-------------------------------------------------------------------->",
			"",
			"const ll mxN = (int)3 * 1e5;",
			"const ll mod = 1e9 + 7;",
			"",
			"void solve()",
			"{",
			"  $1  ",
			"}",
			"",
			"int main()",
			"{",
			"    boost;",
			"    int tc = 1;",
			"    cin >> tc;",
			"    for (int i = 1; i <= tc; i++)",
			"    {",
			"        // cout << \"Case \" << i << \": \";",
			"        solve();",
			"    }",
			"",
			"#ifndef ONLINE_JUDGE",
			"    cerr << \"Time: \" << 1000 * ((double)clock()) / (double)CLOCKS_PER_SEC << \" ms\\n\";",
			"#endif",
			"    return 0;",
			"}",
			""
		],
		"description": "cp start template"
	}
}
