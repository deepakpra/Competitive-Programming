This is my template for debugging in C++. I was inspired by Tourist's source code and modified it to my style. Here is it:

Template
#include <bits/stdc++.h>
using namespace std;

#ifndef ONLINE_JUDGE
#define what(...) cerr << "[" << #__VA_ARGS__ << "]:", dbg_out(__VA_ARGS__)
#else
#define what(...) 42
#endif

template <typename A, typename B>
string to_string(pair<A, B> p);
string to_string(const string &s) { return '"' + s + '"'; }
string to_string(const char s) { return (string) "'" + s + "'"; }
string to_string(const char *s) { return to_string((string)s); }
string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(vector<bool> v)
{
    bool first = true;
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++)
    {
        if (!first)
            res += ",";
        first = false;
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}
template <size_t N>
string to_string(bitset<N> v)
{
    string res = "";
    for (size_t i = 0; i < N; i++)
        res += static_cast<char>('0' + v[i]);
    return res;
}
template <typename A>
string to_string(A &v)
{
    bool first = true;
    string res = "{";
    for (const auto &x : v)
    {
        if (!first)
            res += ",";
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}
template <typename A, typename B>
string to_string(pair<A, B> p)
{
    return "(" + to_string(p.first) + "," + to_string(p.second) + ")";
}
void dbg_out() { cerr << endl; }
template <typename Head, typename... Tail>
void dbg_out(Head H, Tail... T)
{
    cerr << "  " << to_string(H);
    dbg_out(T...);
}

To debug, just type: what(x, y, z...). 

It can work with:

Primitive data types: bool, int, long long, float, ...

std::pair, std::string

Collection types: std::vector, std::map, std::set, ...